types = {
	## graph_related_types = { special_project anomaly_category }
	type[event] = {
		name_field = "id"

		path = "game/events"

		localisation = {
			## primary
			title = title
		}
		## type_key_filter = country_event
		## push_scope = country
		## display_name = Country Event
		## abbreviation = CE
		subtype[country] = {
		}
		## type_key_filter = observer_event
		## push_scope = country
		## display_name = Observer Event
		subtype[observer] = {
		}
		## type_key_filter = pop_event
		## push_scope = pop
		## display_name = Pop Event
		## abbreviation = PoE
		subtype[pop] = {
		}
		## type_key_filter = pop_faction_event
		## push_scope = pop_faction
		## display_name = Pop Faction Event
		## abbreviation = PFE
		subtype[pop_faction] = {
		}
		## type_key_filter = planet_event
		## push_scope = planet
		## display_name = Planet Event
		## abbreviation = PE
		subtype[planet] = {
		}
		## type_key_filter = first_contact_event
		## push_scope = first_contact
		## display_name = First Contact Event
		## abbreviation = FCE
		subtype[first_contact] = {
		}
		## type_key_filter = ship_event
		## push_scope = ship
		## display_name = Ship Event
		## abbreviation = SE
		subtype[ship] = {
		}
		## type_key_filter = fleet_event
		## push_scope = fleet
		## display_name = Fleet Event
		## abbreviation = FE
		subtype[fleet] = {
		}
		## type_key_filter = system_event
		## push_scope = system
		## display_name = System Event
		## abbreviation = SyE
		subtype[system] = {
		}
		## type_key_filter = starbase_event
		## push_scope = starbase
		## display_name = Starbase Event
		## abbreviation = StE
		subtype[starbase] = {
		}
		## type_key_filter = espionage_operation_event
		## push_scope = espionage_operation
		## display_name = Espionage Event
		## abbreviation = EOE
		subtype[espionage_operation] = {
		}
		## type_key_filter = leader_event
		## push_scope = leader
		## display_name = Leader Event
		## abbreviation = LE
		subtype[leader] = {
		}
		## type_key_filter = situation_event
		## push_scope = situation
		## display_name = Situation Event
		## abbreviation = SiE
		subtype[situation] = {
		}
		## type_key_filter = agreement_event
		## push_scope = agreement
		## display_name = Agreement Event
		## abbreviation = AE
		subtype[agreement] = {
		}
		## type_key_filter = event
		subtype[scopeless] = {
		}

		subtype[hidden] = {
			hide_window = yes
		}
		subtype[diplomatic] = {
			diplomatic = yes
		}
		subtype[default] = {
			## cardinality = 0..1
			hide_window = no

			## cardinality = 0..1
			diplomatic = no

			## cardinality = 0..0
			event_window_type = enum[event_window_type]
		}
		subtype[leader_recruit] = {
			event_window_type = leader_recruit
		}
		subtype[leader_story] = {
			event_window_type = leader_story
		}
		subtype[triggered] = {
			is_triggered_only = yes
		}
		subtype[inherited] = {
			base = <event>
		}
	}
}

event = {
	id = scalar
	## cardinality = 0..1
	is_test_event = yes

	subtype[inherited] = {
		base = <event>
		## cardinality = 0..1
		desc_clear = yes
		## cardinality = 0..1
		option_clear = yes
		## cardinality = 0..1
		picture_clear = yes
		## cardinality = 0..1
		show_sound_clear = yes
	}

	subtype[!hidden] = {
		title = localisation
		desc = localisation
		desc = {
			## cardinality = 0..1
			trigger = {
				alias_name[trigger] = alias_match_left[trigger]
				## cardinality = 0..1
				switch = {
					trigger = scalar
					## cardinality = 2..inf
					scalar = {
						## cardinality = 0..1
						if = {
							limit = { alias_name[trigger] = alias_match_left[trigger] }
							text = localisation
						}
						## cardinality = 0..1
						text = localisation
					}
				}
				## cardinality = 0..inf
				scope[any] = {
					alias_name[trigger] = alias_match_left[trigger]
					## cardinality = 0..1
					switch = {
						trigger = scalar
						## cardinality = 2..inf
						scalar = {
							## cardinality = 0..1
							if = {
								limit = { alias_name[trigger] = alias_match_left[trigger] }
								text = localisation
							}
							## cardinality = 0..1
							text = localisation
						}
					}
				}
			}
			## cardinality = 0..1
			exclusive_trigger = {
				alias_name[trigger] = alias_match_left[trigger]
				## cardinality = 0..1
				switch = {
					trigger = scalar
					## cardinality = 2..inf
					scalar = {
						## cardinality = 0..1
						if = {
							limit = { alias_name[trigger] = alias_match_left[trigger] }
							text = localisation
						}
						## cardinality = 0..1
						text = localisation
					}
				}
				## cardinality = 0..inf
				scope[any] = {
					alias_name[trigger] = alias_match_left[trigger]
					## cardinality = 0..1
					switch = {
						trigger = scalar
						## cardinality = 2..inf
						scalar = {
							## cardinality = 0..1
							if = {
								limit = { alias_name[trigger] = alias_match_left[trigger] }
								text = localisation
							}
							## cardinality = 0..1
							text = localisation
						}
					}
				}
			}
			## cardinality = 0..inf
			text = localisation
			## cardinality = 0..1
			show_sound = <sound_effect>
		}
		picture = <sprite>
		picture = {
			picture = <sprite>
			## cardinality = 0..1
			trigger = { alias_name[trigger] = alias_match_left[trigger] }
		}

		## cardinality = 0..inf
		show_sound = <sound_effect>
		## cardinality = 0..inf
		show_sound = {
			sound = <sound_effect>
			## cardinality = 0..1
			sound_is_advisor = bool
			## cardinality = 0..1
			trigger = {
				alias_name[trigger] = alias_match_left[trigger]
			}
		}
		## cardinality = 0..1
		###Force a diplomatic event to be viewed
		force_open = bool

		## cardinality = 0..1
		location = scope[planet]
		## cardinality = 0..1
		location = scope[system]
		## cardinality = 0..1
		location = scope[ship]
		## cardinality = 0..1
		location = scope[fleet]
		## cardinality = 0..1
		location = scope[country]
		## cardinality = 0..1
		location = scope[pop]
		## cardinality = 0..1
		location = scope[starbase]

		## cardinality = 0..1
		situation = scope[situation]

		## cardinality = 0..1
		diplomatic = bool

		## cardinality = 0..1
		event_window_type = enum[event_window_type]

		## cardinality = 0..1
		###Forces the event to pop-up even if player has supressed pop ups
		auto_opens = bool

		## cardinality = 0..1
		is_test_event = bool

		## cardinality = 0..inf
		option = {
			## cardinality = 1..inf
			name = localisation
			## cardinality = 1..inf
			name = {
				trigger = {
					alias_name[trigger] = alias_match_left[trigger]
					## cardinality = 0..1
					switch = {
						trigger = scalar
						## cardinality = 2..inf
						scalar = {
							## cardinality = 0..1
							if = {
								limit = { alias_name[trigger] = alias_match_left[trigger] }
								text = localisation
							}
							## cardinality = 0..1
							text = localisation
						}
					}
					## cardinality = 0..inf
					scope[any] = {
						alias_name[trigger] = alias_match_left[trigger]
						## cardinality = 0..1
						switch = {
							trigger = scalar
							## cardinality = 2..inf
							scalar = {
								## cardinality = 0..1
								if = {
									limit = { alias_name[trigger] = alias_match_left[trigger] }
									text = localisation
								}
								## cardinality = 0..1
								text = localisation
							}
						}
					}
				}
				## cardinality = 0..1
				text = localisation
			}
			## cardinality = 1..inf
			name = {
				exclusive_trigger = {
					alias_name[trigger] = alias_match_left[trigger]
				}
				text = localisation
			}
			## cardinality = 0..1
			icon = {
				icon = <sprite>
				## cardinality = 0..1
				icon_background = <sprite>
				text = localisation
			}

			## cardinality = 0..1
			sound = scalar

			## cardinality = 0..1
			trigger = {
				alias_name[trigger] = alias_match_left[trigger]
			}

			## cardinality = 0..1
			allow = {
				alias_name[trigger] = alias_match_left[trigger]
			}

			## cardinality = 0..1
			exclusive_trigger = {
				alias_name[trigger] = alias_match_left[trigger]
			}

			## cardinality = 0..1
			ai_chance = {
				alias_name[modifier_rule] = alias_match_left[modifier_rule]
			}

			subtype[diplomatic] = {
				## cardinality = 0..1
				response_text = localisation
				## cardinality = 0..1
				is_dialog_only = bool
			}

			subtype[leader_recruit] = {
				## cardinality = 0..1
				tag = enum[leader_recruit_tag_type]
				## cardinality = 0..1
				response_text = localisation
				## cardinality = 0..1
				is_dialog_only = bool
			}

			subtype[leader_story] = {
				## cardinality = 0..1
				response_text = localisation
				## cardinality = 0..1
				is_dialog_only = bool
			}

			## cardinality = 0..1
			### Binds this option to the "dismiss" action
			default_hide_option = bool
			## cardinality = 0..1
			custom_gui = scalar #points to a gui_type, currently all are defined as aliases but this needs to be updated
			## cardinality = 0..1
			alias_name[effect] = alias_match_left[effect]
		}
	}

	subtype[hidden] = {
		## severity = info
		## cardinality = 0..1
		title = OK
		## severity = info
		## cardinality = 0..1
		desc = OK

		## severity = info
		## cardinality = 0..0
		picture = scalar
		## severity = info
		## cardinality = 0..0
		location = scalar
		## severity = info
		## cardinality = 0..0
		show_sound = scalar
	}

	## cardinality = 0..1
	message_desc = localisation

	## cardinality = 0..1
	hide_window = bool


	## cardinality = 0..1
	is_triggered_only = bool

	#I found these bits in the code. Need testing.
	subtype[triggered] = {
		## cardinality = 0..1
		weight_multiplier = {
			factor = float
			## cardinality = 0..100
			alias_name[modifier_rule] = alias_match_left[modifier_rule]
		}
	}
	## cardinality = 0..1
	###Event will cancel (disappear without executing any of the effects in the options) if these triggers return true.
	abort_trigger = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	###Effects executed when abort_trigger returns true.
	abort_effect = {
		alias_name[effect] = alias_match_left[effect]
	}

	## cardinality = 0..1
	fire_only_once = bool

	## cardinality = 0..1
	trackable = bool

	## cardinality = 0..1
	is_advisor_event = bool

	## cardinality = 0..1
	auto_select = bool

	subtype[!triggered] = {
		## cardinality = 0..1
		mean_time_to_happen = {
			## cardinality = 0..1
			years = int

			## cardinality = 0..1
			months = int

			## cardinality = 0..1
			days = int

			## cardinality = 0..100
			alias_name[modifier_rule] = alias_match_left[modifier_rule]
		}
	}

	subtype[diplomatic] = {
		## cardinality = 0..1
		###The title that shows at the top of the diplomatic screen (above the portrait/room, not above the event text)
		diplomatic_title = localisation
		alias_name[picture_event_data] = alias_match_left[picture_event_data]
		## cardinality = 0..1
		custom_gui = scalar #same as previous, needs to be gui_type
		## cardinality = 0..1
		custom_gui_option = scalar #same as previous, needs to be gui_type
	}

	subtype[leader_recruit] = {
		## cardinality = 0..1
		notification_event_icon = <sprite>
		alias_name[picture_event_data] = alias_match_left[picture_event_data]
	}

	subtype[leader_story] = {
		## cardinality = 0..1
		event_picture_background = <sprite>
		alias_name[picture_event_data] = alias_match_left[picture_event_data]
	}

	subtype[planet] = {
		## cardinality = 0..1
		###Like trigger, but only uses certain simple triggers
		pre_triggers = {
			alias_name[planet_pre_trigger] = alias_match_left[planet_pre_trigger]
		}
	}

	subtype[fleet] = {
		## cardinality = 0..1
		archaeology = bool
	}

	subtype[first_contact] = {
		## cardinality = 0..1
		first_contact = bool
	}

	subtype[espionage_operation] = {
		## cardinality = 0..1
		espionage_operation = bool
	}

	## cardinality = 0..1
	trigger = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	immediate = {
		alias_name[effect] = alias_match_left[effect]
	}

	## cardinality = 0..1
	after = {
		alias_name[effect] = alias_match_left[effect]
	}
}

alias[picture_event_data:picture_event_data] = {
	# only one of each of these!
	## cardinality = 0..1
	room = scope[country]
	## cardinality = 0..1
	room = scope[species]
	## cardinality = 0..1
	room = scope[leader]
	## cardinality = 0..1
	room = icon[gfx/portraits/city_sets]
	## cardinality = 0..1
	portrait = <portrait>
	## cardinality = 0..1
	portrait = scope[country]
	## cardinality = 0..1
	portrait = scope[species]
	## cardinality = 0..1
	portrait = scope[leader]
	## cardinality = 0..1
	planet_background = scope[country]
	## cardinality = 0..1
	planet_background = scope[species]
	## cardinality = 0..1
	planet_background = scope[planet]
	## cardinality = 0..1
	planet_background = <planet_class>
	## cardinality = 0..1
	graphical_culture = <graphical_culture>
	## cardinality = 0..1
	graphical_culture = scope[country]
	## cardinality = 0..1
	graphical_culture = scope[species]
	## cardinality = 0..1
	city_level = scope[country]
	## cardinality = 0..1
	city_level = scope[species]
	## cardinality = 0..1
	city_level = scope[planet]
}

enums = {
	enum[event_window_type] = {
		leader_recruit
		leader_story
	}
	enum[leader_recruit_tag_type] = {
		hire_leader
		dismiss_leader
	}
}