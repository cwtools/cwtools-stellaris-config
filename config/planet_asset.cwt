types = {
	type[planet_entity] = {
		path = "gfx\models\planets" #need to add subfolder as well here! - these are stored in *.asset files!
   }
	type[planet_mesh] = {
		path = "gfx\models\planets" #need to add subfolder as well here! - these are stored in *.gfx files!
   }   
	type[planet_animation] = {
		path = "gfx\models\planets" #need to add subfolder as well here! - these are stored in *.asset files!
   }      
} 

planet_entity = { #the container for each entry is called "entity = {" in the asset file, please check.
  #the names for planet entities are connected to the planet_classes files and have a serialized naming scheme 
  #the naming scheme is <entity_name>_int_entity and planets can have multiple entities, with the game spawning one of the entities.
  #examples: toxic_planet_01_entity toxic_planet_02_entity toxic_planet_03_entity toxic_planet_04_entity - all connected to the planet_class files entry for pc_toxic, where entity is defined as "toxic_planet"
  name = "key" 
  pdxmesh = <planet_mesh> #this connects to meshes defined in a *.gfx file!
  
  ## cardinality = 0..1
  cull_radius = float
  ## cardinality = 0..1
  scale = float
  ## cardinality = 0..1
  playback_rate = float
  ## cardinality = 0..1
  default_state = <planet_states>
  ## cardinality = 0..inf
  state = { 
		name = <planet_states>
		## cardinality = 0..1
		state_time = float
		## cardinality = 0..1
		looping = bool
		## cardinality = 0..1
		next_state = <planet_states>
		## cardinality = 0..1
		chance = bool
		## cardinality = 0..1
		get_state_from_parent = bool		
		## cardinality = 0..1
   		animation = <planet_animation> #animations are defined in a different file in the same folder, also a *.asset file
		## cardinality = 0..1		
		time_offset = { 
			## cardinality = 2..2
			int
		}
		## cardinality = 0..inf
		locator = { 
			name = "key" #this is an overwride for locators defined in the meshes
			position = { 
				## cardinality = 3..3
				float
			} #XYZ axis coordinates
		}	
		## cardinality = 0..1		
		game_data = { 
			bloom_factor = float
			uv_animation_speed = float
			uv_animation_direction = { 
				## cardinality = 2..2
				float
			}
		}	
		## cardinality = 0..inf
		event = { 
			## cardinality = 0..1
			time = int
			## cardinality = 0..1
			node = scalar #"bombardment_location_2" for example, this seem to point to a *.mesh file
			## cardinality = 0..1
			particle = scalar #"planetary_bombardment_effect" for example, this points to a file stored under game/gfx/particles/_generic_particles.gfx
			## cardinality = 0..1
			keep_particle = bool
			## cardinality = 0..1
			sound = { 
				soundeffect = scalar #"bombardment_explosion" -  files are stored under game/sound/category.asset	}
			} 
		}	
		## cardinality = 0..inf
		start_event = {
			## cardinality = 0..1
			trigger_once = bool
			## cardinality = 0..1
			soundeffect = scalar #example: "amb_planet_class", files are stored under game/sound/category.asset
	}
	#these need to be updated and linked to other files
	## cardinality = 0..inf
	meshsettings = {
		name = scalar #examples: "planet_geosphereShape" "polesShape" "clouds_geosphereShape"
		
		#The links below link to files stored under game/gfx/models/planets + subfolders! 
		texture_diffuse = scalar #example: "toxic_01_purple_diffuse.dds"		
		texture_normal = scalar #example: "toxic_01_normal.dds"
		texture_specular = scalar #example: "toxic_01_spec.dds"
		## cardinality = 0..1
		shader = scalar #this seems to point to a shader mesh, dunno where its stored. example: "PdxMeshPlanetEmissive". I believe this is stored in a *.mesh file
	}	
}    

enums = {
	
  #these are tied to bombardment stances somehow, but I have no idea how - exnihil
  #TODO - link this to bombardment stances
  enum[planet_states] = { 
		idle
		bombard_selective
		bombard_indiscriminate
		bombard_armageddon
   		bombard_raiding
	}
 } 

planet_mesh = { #the container for all meshes is defined as objectTypes = { at the top of the file, please check, with each entry being defined under pdxmesh = { 
	name = "key"
	file = scalar #there is a full path string here - the path should be parsed. Example: file = "gfx/models/planets/shielded_planet.mesh"
	animation = { 
		id = "name" #example = "idle"
		type = <planet_animation> #this connects to an animation defined in an *.asset file!
	}
	cull_distance = int #WTF? example: cull_distance = 999999999.0f
}	

planet_animation = { #the container here is called animation = { for each animation
	name = "key" #example: "neutron_star_idle_animation"
	file = scalar #this connects to *.anim file stored in the same folder as the asset file, it seems. Example: "neutron_star_idle.anim"
}
