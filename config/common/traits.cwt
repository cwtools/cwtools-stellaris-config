#subtype[species_trait] needs a lack of leader_trait = yes. Using [!leader_trait] for now

types = {
	type[trait] = {
		path = "game/common/traits"
		subtype[species_trait] = {
			## cardinality = 0..0
			leader_class = { }
		}
		subtype[leader_trait] = {
			leader_class = { }
		}
		subtype[leader_trait_subclass] = {
			subclass_trait = yes
		}
		subtype[leader_trait_veteran] = {
			veteran_class_locked_trait = yes
		}
		subtype[leader_trait_destiny] = {
			destiny_trait = yes
		}
		subtype[leader_trait_replacement] = {
			replace_traits = {
				## cardinality = 1..inf
				<trait.leader_trait>
			}
		}
		subtype[leader_trait_not_replacement] = {
			## cardinality = 0..0
			replace_traits = { }
		}
		localisation = {
			## optional
			Name = "$"
			## optional
			Description = "$_desc"
			subtype[leader_trait_not_replacement] = {
				## required
				Name = "$"
				## required
				Description = "$_desc"
			}
		}
	}
}

trait = {
	## cardinality = 0..1
	host_has_dlc = enum[DLCs]
	## cardinality = 0..1
	### Default = no
	immortal_leaders = bool

	## cardinality = 0..1
	### If omitted, the default icon is gfx/interface/icons/traits/<trait_name>.dds
	icon = filepath
	## cardinality = 0..1
	### Layered icon format introduced in Paragon.
	icon = {
		## cardinality = 1..inf
		### There are no limits to the amount of layers that can be used.
		layer = {
			### Texture name defined in "interface" folder. Default trait icons are in "interface/icons/traits" folder.
			icon = <sprite>
			## cardinality = 0..1
			### Layer color tint. Color name defined in "common\named_colors" folder.
			color = <named_color>
			## cardinality = 0..1
			## replace_scope = { this = leader root = leader }
			### Scripted trigger. If false, hide layer.
			visible = {
				alias_name[trigger] = alias_match_left[trigger]
			}
		}
	}
	## cardinality = 0..1
	### This trait costs/gives this amount of points when selected in species/ruler creation.
	cost = int
	## cardinality = 0..1
	### This trait costs/gives this amount of points when selected in species/ruler creation.
	cost = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## cardinality = 0..1
	valid_for_all_ethics = bool
	## cardinality = 0..1
	###This only does something if valid_for_all_ethics is set to no
	allowed_ethics = {
		## cardinality = 1..inf
		<ethos>
	}
	## cardinality = 0..1
	###"yes" required for species traits to apply "allowed_origins" but not leader traits
	valid_for_all_origins = bool
	## cardinality = 0..1
	###This only does something if valid_for_origins is set to no
	allowed_origins = {
		## cardinality = 1..inf
		<civic_or_origin.origin>
	}
	## cardinality = 0..1
	sorting_priority = int

	subtype[species_trait] = {
		## cardinality = 0..1
		## replace_scope = { this = species root = species from = planet }
		assembly_score = {
			alias_name[modifier_rule] = alias_match_left[modifier_rule]
		}
		allowed_archetypes = {
			## cardinality = 1..inf
			<species_archetype>
		}
		## cardinality = 0..1
		allowed_planet_classes = {
			## cardinality = 1..inf
			<planet_class>
		}
		## cardinality = 0..1
		ideal_planet_class = <planet_class>
		## cardinality = 0..1
		species_class = {
			## cardinality = 1..inf
			<species_class>
		}
		## cardinality = 0..1
		## replace_scope = { this = country root = country }
		modifier = {
			alias_name[modifier] = alias_match_left[modifier]
		}
		## cardinality = 0..1
		## replace_scope = { this = planet root = planet }
		assembling_modifier = {
			alias_name[modifier] = alias_match_left[modifier]
		}
		## cardinality = 0..1
		## replace_scope = { this = planet root = planet }
		declining_modifier = {
			alias_name[modifier] = alias_match_left[modifier]
		}
		## cardinality = 0..1
		## replace_scope = { this = planet root = planet }
		growing_modifier = {
			alias_name[modifier] = alias_match_left[modifier]
		}
		## cardinality = 0..inf
		###won't show in trait tooltips, use custom_tooltip/custom_tooltip_with_modifiers
		alias_name[triggered_pop_modifier] = alias_match_left[triggered_pop_modifier]
		## cardinality = 0..inf
		## replace_scope = { this = planet root = planet from = species fromfrom = country }
		alias_name[triggered_planet_growth_habitability_modifier] = alias_match_left[triggered_planet_growth_habitability_modifier]
		## cardinality = 0..inf
		###won't show in trait tooltips, use custom_tooltip/custom_tooltip_with_modifiers
		alias_name[triggered_leader_modifier_pop] = alias_match_left[triggered_leader_modifier_pop]
		## cardinality = 0..1
		### Default = yes
		sapient = bool
		## cardinality = 0..1
		### Default = no
		forced_happiness = bool
		## cardinality = 0..1
		### Default = no
		improves_leaders = bool
		## cardinality = 0..1
		### Default = no
		advanced_trait = bool
		## cardinality = 0..1
		leader_age_min = int
		## cardinality = 0..1
		leader_age_max = int
		## replace_scope = { this = species root = species from = country }
		## cardinality = 0..1
		species_potential_add = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## replace_scope = { this = species root = species from = country }
		## cardinality = 0..1
		species_possible_add = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## replace_scope = { this = species root = species from = country }
		## cardinality = 0..1
		species_potential_remove = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## replace_scope = { this = species root = species from = country }
		## cardinality = 0..1
		species_possible_remove = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## replace_scope = { this = species root = species from = country }
		## cardinality = 0..1
		species_possible_merge_add = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## replace_scope = { this = species root = species from = country }
		## cardinality = 0..1
		species_possible_merge_remove = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## cardinality = 0..1
		prerequisites = {
			## cardinality = 0..100
			<technology>
		}
		## cardinality = 0..1
		opposites = {
			## cardinality = 0..inf
			<trait.species_trait>
		}

		## cardinality = 0..1
		potential_crossbreeding_chance = float

		## cardinality = 0..1
		slave_cost = {
			energy = int
		}
		## cardinality = 0..1
		infertile = bool

		## cardinality = 0..1
		random_weight = {
			## cardinality = 1..inf
			<species_class> = float
		}
	}

	subtype[leader_trait] = {
		## cardinality = 0..1
		### This trait is available in ruler creation. (Default: no)
		starting_ruler_trait = yes
		## cardinality = 0..1
		### OR - This trait is blocked in ruler creation if listed origins are selected.
		forbidden_origins = {
			## cardinality = 1..inf
			<civic_or_origin.origin>
		}
		## cardinality = 0..1
		### Is this trait only active if the leader is on the Council? (Default: no)
		councilor_trait = bool
		## cardinality = 0..1
		### Is this a negative trait? (Default: no)
		negative = bool
		## cardinality = 0..1
		### Does the "modifier" block apply to empire if leader is ruler? (Default: no)
		is_councilor_trait_for_ruler = bool
		## cardinality = 0..1
		subclass_trait = yes
		## cardinality = 0..1
		subclass_background_icon = <sprite>
		## cardinality = 0..1
		veteran_class_locked_trait = yes
		## cardinality = 0..1
		destiny_trait = yes
		## cardinality = 0..1
		destiny_background_icon = <sprite>
		## cardinality = 0..1
		ethic_destiny_trait = yes
		## cardinality = 0..1
		###Does the General cause FTL inhibitor effects? Note: unclear if/how this might apply to other leader types
		ftl_inhibitor = yes
		## cardinality = 0..1
		### Is this leader immortal? (Default: no)
		immortal_leaders = bool
		## cardinality = 0..1
		### Is this trait available during leader generation, level up or yearly negative trait chance. (Default: yes)
		randomized = bool
		## cardinality = 0..1
		### (Default: no)
		hide_age = bool
		## cardinality = 0..1
		can_retreat = bool #admiral
		## cardinality = 0..1
		## replace_scope = { this = leader root = leader }
		### Modifier applied to leader itself.
		self_modifier = {
			alias_name[modifier] = alias_match_left[modifier]
		}
		## cardinality = 0..1
		## replace_scope = { this = country root = country }
		### Modifier applied to scope leader is assigned to (e.g. fleet, or science ship) or country if councilor trait.
		modifier = {
			alias_name[modifier] = alias_match_left[modifier]
		}
		## cardinality = 0..1
		## replace_scope = { this = planet root = planet }
		### Modifier applied to planet if General assigned to defense army.
		planet_modifier = {
			alias_name[modifier] = alias_match_left[modifier]
		}
		## cardinality = 0..inf
		## replace_scope = { this = planet root = planet }
		### Modifier applied to planet if Scientist's science vessel assigned to assist research.
		assist_research_planet_modifier = {
			alias_name[modifier] = alias_match_left[modifier]
		}
		## cardinality = 0..1
		## replace_scope = { this = galactic_object root = galactic_object }
		### Modifier applied to system if General or Governor is assigned to planet within it.
		system_modifier = {
			alias_name[modifier] = alias_match_left[modifier]
		}
		## cardinality = 0..inf
		### Modifier applied to the leader itself if the given condition is fulfilled.
		alias_name[triggered_leader_modifier_leader] = alias_match_left[triggered_leader_modifier_leader]
		## cardinality = 0..inf
		### Modifier applied to location the leader is assigned to if the given condition is fulfilled.
		alias_name[triggered_modifier_planet] = alias_match_left[triggered_modifier_planet]
		## cardinality = 0..inf
		### Modifier applied to location the leader is assigned to if the given condition is fulfilled.
		alias_name[triggered_modifier_fleet] = alias_match_left[triggered_modifier_fleet]
		## cardinality = 0..inf
		### Modifier applied to location the leader is assigned to if the given condition is fulfilled.
		alias_name[triggered_modifier_country] = alias_match_left[triggered_modifier_country]
		## cardinality = 0..inf
		### Modifier applied to the planet to which the General is assigned to defend if the given condition is fulfilled.
		alias_name[triggered_planet_modifier_leader] = alias_match_left[triggered_planet_modifier_leader]
		## cardinality = 0..inf
		## replace_scope = { this = leader root = leader }
		### Show key if trigger/exclusive_trigger is true.
		triggered_desc = {
			## cardinality = 0..1
			### Trigger appends additional localization key to existing text.
			trigger = {
				alias_name[trigger] = alias_match_left[trigger]
			}
			## cardinality = 0..1
			### Exclusive trigger replaces all other text in tooltip with localization key.
			exclusive_trigger = {
				alias_name[trigger] = alias_match_left[trigger]
			}
			text = localisation
		}
		## cardinality = 0..1
		### Replaces auto-generated trait subtitle with localization key.
		custom_subtitle = localisation
		## cardinality = 0..1
		### AND - Trait only available if the technology specified has been researched by the Empire.
		prerequisites = {
			## cardinality = 0..inf
			<technology>
		}
		leader_class = all
		leader_class = {
			## cardinality = 1..5
			enum[leader_classes]
		}
		leader_trait_rarity = enum[leader_trait_rarity]
		## cardinality = 0..1
		## replace_scope = { this = leader root = leader from = country }
		leader_potential_add = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## cardinality = 0..1
		### AND - Trait only available if the leaders species has this trait.
		requires_traits = {
			## cardinality = 1..inf
			<trait.species_trait>
		}
		## cardinality = 0..1
		## OR - Trait only available if the Empire has this type of government form.
		requires_governments = {
			## cardinality = 1..inf
			<government>
		}
		## cardinality = 0..1
		### OR - Trait only available if none of the listed traits are currently on leader.
		opposites = {
			## cardinality = 0..inf
			<trait.leader_trait>
		}
		## cardinality = 0..1
		### AND - Trait will remove listed traits currently on leader when added.
		replace_traits = {
			## cardinality = 1..inf
			<trait.leader_trait>
		}
		## cardinality = 0..1
		### AI will outfit ships with components based on this tag if trait is selected.
		fleet_specialization_tag = enum[component_tags]
		## cardinality 0..1
		### Weight for availability at level up. Default is 100.
		selectable_weight = int
		## cardinality 0..1
		## replace_scope = { this = leader root = leader from = country }
		### Weight for availability at level up. Default is 100.
		selectable_weight = {
			enum[weight_or_factor] = float
			alias_name[modifier_rule] = alias_match_left[modifier_rule]
		}
		## cardinality 0..1
		### (Default: yes)
		notify_on_gained = bool
		## cardinality 0..1
		## replace_scope = { this = leader root = leader }
		### Effects in this block fire when trait is acquired.
		on_gained_effect = {
			alias_name[effect] = alias_match_left[effect]
		}
	}
	## cardinality = 0..1
	ai_categories = {
		## cardinality = 1..4
		enum[trait_ai_classes]
	}

	## cardinality = 0..1
	initial = bool
	## cardinality = 0..1
	randomized = bool

	## cardinality = 0..1
	### Replaces auto-generated modifier effect text with localization key.
	custom_tooltip = localisation
	## cardinality = 0..1
	### Appends localization key to the end of auto-generated modifier effect text.
	custom_tooltip_with_modifiers = localisation

	## cardinality = 0..1
	ai_weight = int
	## cardinality = 0..1
	ai_weight = {
		## cardinality = 0..1
		enum[weight_or_factor] = int
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
}

enums = {
	enum[trait_ai_classes] = {
		engineering
		physics
		society
		survey
	}
	enum[leader_trait_rarity] = {
		common
		veteran
		paragon
		free_or_veteran
		negative
	}
}
